continents$continent
glance_df%>%
filter(country = "Australia")%>%
summarise(value = r.squared)
glance_df%>%
filter(country == "Australia")%>%
summarise(value = r.squared)
glance_df %>%
ggplot(aes(continent, r.squared)) +
geom_jitter(aes(color=continent))
library(glmx)
data("BeetleMortality")
as_tibble(BeetleMortality)
install.packages("glmx")
library(glmx)
data("BeetleMortality")
as_tibble(BeetleMortality)
BeetleMortality
library(ggplot2)
BeetleMortality$propDied<- BeetleMortality$died/BeetleMortality$n
ggplot(BeetleMortality,aes(dose,propDied)) + geom_point()
install.packages("titanic")
data("titanic")
Titanic
titanic_train
titanic::titanic_train
titanic.glm<- glm(Survived ~ Age + Sex, family = binomial(),titanic_train)
summary(titanic.glm)
library(titanic)
titanic_train
titanic.glm<- glm(Survived ~ Age + Sex, family = binomial(),titanic_train)
summary(titanic.glm)
titanic_train$Pclass
str(titanic_train)
titanic.glm<- glm(Survived ~ Pclass + Sex, family = binomial(),titanic_train)
summary(titanic.glm)
titanic.glm<- glm(Survived ~ factor(Pclass) + Sex, family = binomial(),titanic_train)
summary(titanic.glm)
df
library(modelr)
heights
summary(heights)
str(heights)
summary(heights$height)
summary(heights$sex)
library(MASS)
data("iris")
iris  <- as.tibble(iris)
iris
ggplot(iris,aes(Sepal.Length,Sepal.Width, col= Species))+geom_point()
iris.lda<- lda(Species ~ Sepal.Length + Sepal.Width,data=iris)
iris.lda
sepal.grid  <- expand.grid(Sepal.Length = seq(4,8,length = 100),
Sepal.Width = seq(2,4.5,length = 100))
sepal.grid
sepal.grid$Species  <- predict(iris.lda,sepal.grid)$class
sepal.grid
ggplot(sepal.grid, aes(Sepal.Length, Sepal.Width, fill = Species)) +
geom_tile(alpha = 0.2) +
geom_point(data = iris, aes(col = Species, fill = NA))
cancer <- tibble(case = factor(c(rep(1,3),rep(0,3)),
levels = c(0,1),
labels = c("control","case")),
x1 = c(1,2,3,4,2,3),
x2 = c(4,8,6,0,2,4))
cancer
library(dplyr)
cancer <- tibble(case = factor(c(rep(1,3),rep(0,3)),
levels = c(0,1),
labels = c("control","case")),
x1 = c(1,2,3,4,2,3),
x2 = c(4,8,6,0,2,4))
cancer
cancer %>% ggplot(aes(x1,x2)) + geom_point(aes(color=case))
u1<- cancer%>%
filter(case == "case")%>%
summarise(x1 = x1/n(),
x2 = x2/n())
u1<- cancer%>%
filter(case == "case")%>%
summarise(x1 = mean(x1),
x2 = mean(x2))
u1
u1<- matrix(nrow = 2,ncol = 1)
u1
u1<- cancer%>%
filter(case == "case")%>%
summarise(x1 = mean(x1),
x2 = mean(x2))
u1<- matrix(nrow = 2,ncol = 1,data=u1)
u1
X <- matrix(c(-1,0,1,1,-1,0,-2,2,0,-2,0,2), nrow=6, byrow=FALSE)
X
E<- (t(X)%*%X)/4
E
t(X)%*%X
t(X)
X
solve()
?solve
solve(E)
E
A1<- solve(e)%*%u1
A1<- solve(E)%*%u1
Ei<- solve(E)
Ei
A1<- Ei%*%u1
u1
solve(E)
A1<- solve(E)%*%u1
rm(Ei)
E
u1
as.matrix(u1)
u1<- as.matrix(u1)
A1<- solve(E) %*% u1
A1<- solve(E) %*% as.matrix(u1)
u1<- as.matrix(as.numeric(u1))
u1
A1<- solve(E) %*% u1
B1<- t(u1)%*%solve(E)%*%u1
B1
u2<- cancer%>%
filter(case == "control")%>%
summarise(x1 = mean(x1),
x2 = mean(x2))
u2<- as.matrix(as.numeric(u2))
u2
A2<- solve(E)%*% u2
B2<- t(u2)%*%solve(E)%*%u2
xNew<- matrix(c(1,4),nrow = 1)
xNew
xnew*(A1-A2)+1/2*(B1-B2)
xNew*(A1-A2)+1/2*(B1-B2)
A1-A2
xNew*(A1-A2)
xNew<- matrix(c(1,4),ncol = 1)
xNew*(A1-A2)
xNew*(A1-A2)+1/2*(B1-B2)
B1-B2
1/2*(B1-B2)
xNew*A1
xNew<- matrix(c(1,4),nrow = 1)
(1/2)*(B1-B2)
xNew%*%(A1-A2)+(1/2)*(B1-B2)
xNew%*%(A1-A2)
A1-A2
xNew%*%(A1-A2)
xNew%*%(A1-A2)+(1/2)*(B1-B2)
head(mtcars)
mt.lm<- lm(mpg ~ disp,data=mtcars)
mt.lm
summary(mt.lm)
broom::glance(mt.lm)
mt.lm<- lm(mpg ~ disp + wt, data=mtcars)
broom::glance(mt.lm)
mt.lm<- lm(mpg ~ dips + wt + hp,data = mtcars)
broom::glance(mt.lm)
mt.lm<- lm(mpg ~ disp + wt + hp,data = mtcars)
broom::glance(mt.lm)
mt.lm<- lm(mpg ~ disp + wt + hp + cyl, data = mtcars)
broom::glance(mt.lm)
mt.lm<- lm(mpg ~ disp + wt + hp + cyl + gear, data = mtcars)
broom::glance(mt.lm)
broom::glance(lm(mpg ~ cyl + disp + hp + drat + wt + qsec + vs + am + gear + carb, data=mtcars))
lm.null<- lm(mpg ~ 1,data = mtcars)
AIC(lm.null)
BIC(lm.null)
step(lm.null, scope = list(upper=lm(mpg ~ .,data = mtcars)),direction = "forward")
lm.full<- lm(mpg ~ .,data = mtcars)
summary(lm.full)
AIC(lm.full)
BIC(lm.full)
step(lm.full, scope = list(lower=lm.null), direction = "backward")
lm.mtcars <- lm(mpg ~ disp + cyl + qsec, data=mtcars)
summary(lm.mtcars)
step(lm.mtcars,scope = list(upper=lm.full,lower=lm.null), direction = "both")
#cross validation
mpg
#cross validation
data(mpg)
library(dplyr)
library(tidyverse)
#cross validation
data(mpg)
mpg
library(modelr)
cv<-crossv_kfold(mpg,k=5)
cv
models1  <- map(cv$train, ~lm(hwy ~ displ, data = .))
models2  <- map(cv$train, ~lm(hwy ~ displ + drv, data = .))
get_pred  <- function(model, test_data){
data  <- as.data.frame(test_data)
pred  <- add_predictions(data, model)
return(pred)
}
pred1  <- map2_df(models1, cv$test, get_pred, .id = "Run")
pred2  <- map2_df(models2, cv$test, get_pred, .id = "Run")
MSE1  <- pred1 %>% group_by(Run) %>%
summarise(MSE = mean( (hwy - pred)^2))
MSE1
cv<-crossv_kfold(mpg,k=5)
cv
models1  <- map(cv$train, ~lm(hwy ~ displ, data = .))
models2  <- map(cv$train, ~lm(hwy ~ displ + drv, data = .))
get_pred  <- function(model, test_data){
data  <- as.data.frame(test_data)
pred  <- add_predictions(data, model)
return(pred)
}
pred1  <- map2_df(models1, cv$test, get_pred, .id = "Run")
pred2  <- map2_df(models2, cv$test, get_pred, .id = "Run")
MSE1  <- pred1 %>% group_by(Run) %>%
summarise(MSE = mean( (hwy - pred)^2))
MSE1
MSE2  <- pred2 %>% group_by(Run) %>%
summarise(MSE = mean( (hwy - pred)^2))
MSE2
mean(MSE1$MSE)
mean(MSE2$MSE)
#Activity
set.seed(64)
heights$income <- heights$income/1000
heights <- heights[-c(721,973,1611,1641,1866,2828,3122,6178,6319,6794),]
incomeCV<- crossv_kfold(heights,k=5)
incomeCV<- crossv_kfold(heights,k=6)
modelh1<- map(incomeCV$train, ~lm(income ~ height, data=.))
modelh2<- map(incomeCV$train, ~lm(income ~ sex, data=.))
modelh3<- map(incomeCV$train, ~lm(income ~ education, data=.))
get_pred <- function(model, test_data) {
data <- as.data.frame(test_data)
pred <- add_predictions(data, model)
return(pred)
}
predh1<- map2_df(modelh1, incomeCV$test, get_pred, .id="Run")
predh2<- map2_df(modelh2, incomeCV$test, get_pred, .id="Run")
predh3<- map2_df(modelh3, incomeCV$test, get_pred, .id="Run")
pred1
predh1
MSEh1<- predh1 %>% group_by(Run) %>%
summarise(MSE = mean( (income - pred ) ^2 ))
MSEh2<- predh2 %>% group_by(Run) %>%
summarise(MSE = mean((income - pred)^2))
MSEh3<- predh3 %>% group_by(Run) %>%
summarise(MSE = mean((income - pred)^2))
MSEh1
MSEh2
MSEh1
View(MSEh1)
#Activity
set.seed(64)
incomeCV<- crossv_kfold(heights,k=6)
modelh1<- map(incomeCV$train, ~lm(income ~ height, data=.))
modelh2<- map(incomeCV$train, ~lm(income ~ sex, data=.))
modelh3<- map(incomeCV$train, ~lm(income ~ education, data=.))
get_pred <- function(model, test_data) {
data <- as.data.frame(test_data)
pred <- add_predictions(data, model)
return(pred)
}
predh1<- map2_df(modelh1, incomeCV$test, get_pred, .id="Run")
predh2<- map2_df(modelh2, incomeCV$test, get_pred, .id="Run")
predh3<- map2_df(modelh3, incomeCV$test, get_pred, .id="Run")
MSEh1<- predh1 %>% group_by(Run) %>%
summarise(MSE = mean( (income - pred ) ^2 ))
MSEh2<- predh2 %>% group_by(Run) %>%
summarise(MSE = mean((income - pred)^2))
MSEh3<- predh3 %>% group_by(Run) %>%
summarise(MSE = mean((income - pred)^2))
View(MSEh1)
View(MSEh2)
View(MSEh3)
mean(MSEh1$MSE)
mean(MSEh2$MSE)
mean(MSEh3$MSE)
`NFL.Play.by.Play.2009.2017.(v4)` <- read.csv("~/Downloads/NFL Play by Play 2009-2017 (v4).csv")
View(`NFL.Play.by.Play.2009.2017.(v4)`)
xx <- seq(1,5,0.01)
xx
rm(xx)
install.packages("sparklyr")
library(sparklyr)
sc <- spark_connect(master = "local")
spark_install()
sc <- spark_connect(master = "local")
spark_install()
library(sparklyr)
spark_install()
spark_install(version = "2.3.0")
spark_install(version = "2.2.1")
spark_install(version = "2.1.0")
sc <- spark_connect(master = "local")
library(nycflights13)
install.packages("nycflights13")
library(nycflights13)
flights_tbl<- copy_to(sc,flights::nycflights13,"flights")
flights_tbl<- copy_to(sc,flights::nycflights13,"flights")
library(dplyr)
flights_tbl<- copy_to(sc,flights::nycflights13,"flights")
flights_tbl<- copy_to(sc,nycflights13::flights,"flights")
src_tbls(sc)
flights_tbl %>% filter(year==2013)
flights_tbl %>% select(year, origin)
flights_tbl %>%
group_by(origin)%>%
summarise(mean_delay= mean(dep_delay))
library(ggplot2)
delay <- flights_tbl %>%
group_by(tailnum) %>%
summarise(count = n(), dist = mean(distance), delay = mean(arr_delay)) %>%
filter(count > 20, dist < 2000, !is.na(delay)) %>%
collect
ggplot(delay, aes(dist, delay)) +
geom_point(aes(size = count), alpha = 1/2) +
geom_smooth() +
scale_size_area(max_size = 2)
flights_tbl
library(dplyr)
library(sparklyr)
flights_tbl
flights_tbl
sc <- spark_connect(master = "local")
src_tbls(sc)
library(nycflights13)
flights_tbl<- copy_to(sc,nycflights13::flights,"flights")
src_tbls(sc)
flights_tbl
flights_tbl%>%
ft_binarizer("distance","long_flight",threshold =1500)%>%
select(distance,long_flight)
flights_tbl%>%
ft_binarizer("distance","long_flight",threshold =1500)%>%
select(distance,long_flight)%>%
collect()%>%
mutate(long_flight2 = ifelse(long_flight== 0,"short","long"))
flights_tbl%>%
ft_bucketizer("distance","distance_cat",
splits = c(0,500,1500,Inf))%>%
select(distance, distance_cat)
library(sparklyr)
sc <- spark_connect(master = "local")
library(dplyr)
library(ggplot2)
pca_model<- tbl(sc,"iris") %>%
select(-Species)%>%
ml_pca()
print(pca_model)
iris_tbl<- copy_to(sc, iris, "iris",overwrite = TRUE)
pca_model<- tbl(sc,"iris") %>%
select(-Species)%>%
ml_pca()
print(pca_model)
D <- as.matrix(iris[1:4])
E <- as.matrix(pca_model$components)
P <-  D %*% E
PCs <- as.data.frame(P)
PCs$Species <- iris$Species
D <- as.matrix(iris[1:4])
E <- as.matrix(pca_model$components)
E <- as.matrix(pca_model$explained_variance)
P <-  D %*% E
PCs <- as.data.frame(P)
PCs$Species <- iris$Species
ggplot(PCs,aes(PC1,PC2)) + geom_point(aes(colour = Species))
E <- as.matrix(pca_model$k)
E <- as.matrix(pca_model$pc)
P <-  D %*% E
PCs <- as.data.frame(P)
ggplot(PCs,aes(PC1,PC2)) + geom_point(aes(colour = Species))
ggplot(PCs,aes(PC1,PC2)) + geom_point(aes(colour = iris$Species))
###K-MEANS
kmeans_model <- iris_tbl %>%
select(Petal_Width, Petal_Length) %>%
ml_kmeans(centers = 3)
kmeans_model <- iris_tbl %>%
select(Petal_Width, Petal_Length) %>%
ml_kmeans(centers = 3)
###PCA
iris_tbl<- copy_to(sc, iris, "iris",overwrite = TRUE)
kmeans_model <- iris_tbl %>%
select(Petal_Width, Petal_Length) %>%
ml_kmeans(centers = 3)
ris_tbl %>%
select(Petal_Width, Petal_Length) %>%
iris_tbl %>%
select(Petal_Width, Petal_Length) %>%
iris_tbl %>%
select(Petal_Width, Petal_Length) %>%
ml_kmeans(centers = 3)
iris_tbl %>%
select(Petal_Width, Petal_Length) %>%
ml_kmeans(centers = 3)
iris_tbl %>%
select(Petal_Width, Petal_Length) %>%
###K-MEANS
kmeans_model <- iris_tbl %>%
select(Petal_Width, Petal_Length) %>%
ml_kmeans(centers = 3)
###K-MEANS
kmeans_model <- iris_tbl %>%
select(Petal_Width, Petal_Length) %>%
ml_kmeans(k=3)
###K-MEANS
kmeans_model <- iris_tbl %>%
select(Petal_Width, Petal_Length) %>%
ml_kmeans(k=3L)
?ml_kmeans
###K-MEANS
kmeans_model <- iris_tbl %>%
select(Petal_Width, Petal_Length) %>%
ml_kmeans(k=3,features_col="features")
###PCA
iris_tbl<- copy_to(sc, iris, "iris",overwrite = TRUE)
iris_tbl
###K-MEANS
kmeans_model <- iris_tbl %>%
ml_kmeans(formula= ~ Petal_Width + Petal_Length, centers = 3)
print(kmeans_model)
sdf_predict(kmeans_model) %>%
collect() %>%
ggplot(aes(Petal_Length, Petal_Width)) +
geom_point(aes(Petal_Width, Petal_Length, col = factor(prediction+1)),
size = 2, alpha = 0.5) +
geom_point(data = kmeans_model$centers, aes(Petal_Width, Petal_Length),
pch = 'x', size = 12) +
scale_color_discrete(name = "Predicted cluster")
install.packages("rattle.data")
wine <- rattle.data::wine
wine[-1] <- scale(wine[-1])
wine_tbl<- copy_to(sc, wine, "wine",overwrite = TRUE)
wine_pca_model<- tbl(sc,"wine")%>%
select(-Type)%>%
ml_pca()
print(wine_pca_model)
kmeans_model_wine<- wine_tbl%>%
ml_kmeans(formula= ~Nonflavanoids + Hue, centers = 3)
print(kmeans_model_wine)
livoxData <- read.csv("~/Documents/UFRPE/TCC/livoxData.csv")
View(livoxData)
library(dplyr)
library(tidyr)
separate(livoxData,timestamp,into = c("data","hora"),sep = " ")
livoxData <- separate(livoxData,timestamp,into = c("data","hora"),sep = " ")
livoxData <- separate(livoxData,data,into = c("ano","mes","dia"),sep = "-")
livoxData<- separate(livoxData,hora,into = c("hora","minuto","segundo"),sep = ":")
install.packages("xgboost")
install.packages("archdata")
install.packages("caret")
install.packages("e1071")
install.packages("Ckmeans.1d.dp")
install.packages("Ckmeans.1d.dp")
library(xgboost)
library(archdata)
library(caret)
library(e1071)
library(Ckmeans.1d.dp)
set.seed(717)
data(RBGlass1)
dat <- RBGlass1
View(dat)
dat$Site <- as.numeric(dat$Site)
dat_add <- dat[which(dat$Site == 1),] %>%
rowwise() %>%
mutate_each(funs(./10 + rnorm(1,.,.*0.1))) %>%
mutate_each(funs(round(.,2))) %>%
mutate(Site = 3)
library(dplyr)
library(tidyr)
dat_add <- dat[which(dat$Site == 1),] %>%
rowwise() %>%
mutate_each(funs(./10 + rnorm(1,.,.*0.1))) %>%
mutate_each(funs(round(.,2))) %>%
mutate(Site = 3)
View(dat_add)
install.packages("naivebayes")
install.packages("psych")
install.packages("psych")
library(naivebayes)
library(psych)
library(dplyr)
library(ggplot2)
binary <- read.csv("~/Documents/UFRPE/TCC/scripts/data/examples/binary.csv")
View(binary)
xtabs(~admit +rank, data=binary)
binary$rank<- as.factor(binary$rank)
binary$admit<- as.factor(binary$admit)
pairs.panels(binary[-1])
setwd("~/Documents/machine learning with R")
state.x77
head(state.x77)
tail(state.x77)
days<- c('mon','tue','wed','thu','fri','sat','sun')
temp<- c(87,65,78,88,92,77,65)
rain<- c(T,F,T,T,F,F,T)
df<- data.frame(days,temp,rain)
df
df[1:4,c(1,3)]
df$days #return a vector format
df['days'] #return a data frame format
subset(df,subset = rain==T)
condition<- rain==T
subset(df,subset = condition)
condition<- rain==T
tempCondition<- temp>80
subset(df,subset = condition)
subset(df,subset = temp)
subset(df,subset = tempCondition)
sortedTemp<- order(df$temp)
sortedTemp
df[sortedTemp]
df['sortedTemp']
df[sortedTemp,]
